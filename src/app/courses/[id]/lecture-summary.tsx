'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { summarizeLecture } from '@/ai/flows/lecture-summaries';
import { Loader2, Sparkles } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import type { Lecture } from '@/lib/data';

export default function LectureSummary({ lecture }: { lecture: Lecture }) {
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);

  const handleGenerateSummary = async () => {
    setIsLoading(true);
    setIsOpen(true);
    // In a real app, you would get the video data URI from a source
    // For this scaffold, we'll use a placeholder and mock a delay
    try {
      // const result = await summarizeLecture({
      //   lectureVideoDataUri: 'placeholder-data-uri',
      //   topic: lecture.title,
      // });
      // setSummary(result.summary);
      await new Promise(resolve => setTimeout(resolve, 1500));
      setSummary(`This is a mock summary for the lecture titled "${lecture.title}". The AI model would analyze the video content and provide a concise overview of the key topics, concepts, and examples discussed. This helps students quickly review the material and find specific information within the lecture.`);
    } catch (error) {
      console.error('Failed to generate summary:', error);
      setSummary('Sorry, we were unable to generate a summary for this lecture.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <Button variant="outline" size="sm" onClick={handleGenerateSummary} disabled={isLoading}>
        {isLoading ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <Sparkles className="mr-2 h-4 w-4" />
        )}
        Generate Summary
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>AI Summary for: {lecture.title}</DialogTitle>
            <DialogDescription>
              This summary was generated by LearnAI.
            </DialogDescription>
          </DialogHeader>
          <div className="prose prose-sm max-w-none">
            {isLoading ? (
              <div className="flex items-center justify-center p-8">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
              </div>
            ) : (
              <p>{summary}</p>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
